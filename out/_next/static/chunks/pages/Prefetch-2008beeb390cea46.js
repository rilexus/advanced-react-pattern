(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[781],{2573:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return L}});var r=t(7294),i=t(3236);function s(n,e){return Math.random()*(e-n)+n}var d=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s(1e3,3e3);return new Promise((function(e,t){setTimeout((function(){e({data:{responseTime:Math.round(n)}})}),n)}))},c=t(5893),o=function(n){var e=n.children;return(0,c.jsx)("div",{style:{padding:"2rem"},children:e})},a=function(n){var e=n.children,t=(0,r.useState)(null),i=t[0],s=t[1];return(0,r.useEffect)((function(){d().then((function(n){s(n)}))}),[]),(0,c.jsxs)("div",{style:{height:"26rem",border:"1px solid black"},children:[(0,c.jsx)("div",{children:"Component A"}),(0,c.jsxs)("div",{children:["Data: ",i&&JSON.stringify(i)]}),(0,c.jsx)(o,{children:i?(0,c.jsx)("div",{children:e}):(0,c.jsx)("div",{children:"Loading..."})})]})},l=function(n){var e=n.children,t=(0,r.useState)(null),i=t[0],s=t[1];return(0,r.useEffect)((function(){d().then((function(n){s(n)}))}),[]),(0,c.jsxs)("div",{style:{border:"1px solid black"},children:[(0,c.jsx)("div",{children:"Component B"}),(0,c.jsxs)("div",{children:["Data: ",i&&JSON.stringify(i)]}),(0,c.jsx)(o,{children:i?(0,c.jsx)("div",{children:e}):(0,c.jsx)("div",{children:"Loading..."})})]})},h=function(n){var e=n.children,t=(0,r.useState)(null),i=t[0],s=t[1];return(0,r.useEffect)((function(){d().then((function(n){s(n)}))}),[]),(0,c.jsxs)("div",{style:{border:"1px solid black"},children:[(0,c.jsx)("div",{children:"Component C"}),(0,c.jsxs)("div",{children:["Data: ",i&&JSON.stringify(i)]}),(0,c.jsx)(o,{children:i?(0,c.jsx)("div",{children:e}):(0,c.jsx)("div",{children:"Loading..."})})]})},u=function(n){var e=n.children,t=(0,r.useState)(null),i=t[0],s=t[1];return(0,r.useEffect)((function(){d().then((function(n){s(n)}))}),[]),(0,c.jsxs)("div",{style:{border:"1px solid black"},children:[(0,c.jsx)("div",{children:"Component D"}),(0,c.jsxs)("div",{children:["Data: ",i&&JSON.stringify(i)]}),(0,c.jsx)(o,{children:i?(0,c.jsx)("div",{children:e}):(0,c.jsx)("div",{children:"Loading..."})})]})},f=function(){return(0,c.jsx)("div",{children:(0,c.jsx)(a,{children:(0,c.jsx)(l,{children:(0,c.jsx)(h,{children:(0,c.jsx)(u,{})})})})})},x=t(2640),v=t(29),j=t(7794),p=t.n(j);function m(n){var e="fetching",t=e,i=null,s=null,d=n();return d.then((function(n){t="resolved",i=n}),(function(n){t="error",s=n})),function(){var n=function(){var n=(0,r.useState)(!1),e=n[0],t=n[1];return(0,r.useCallback)((function(){t((function(n){return!n}))}),[e,t])}();return(0,r.useEffect)((function(){t===e&&d.then((function(){n()}))}),[]),[i,s]}}var g=m((0,v.Z)(p().mark((function n(){return p().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.abrupt("return",d());case 1:case"end":return n.stop()}}),n)})))),y=m((0,v.Z)(p().mark((function n(){return p().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.abrupt("return",d());case 1:case"end":return n.stop()}}),n)})))),b=m((0,v.Z)(p().mark((function n(){return p().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.abrupt("return",d());case 1:case"end":return n.stop()}}),n)})))),C=m((0,v.Z)(p().mark((function n(){return p().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.abrupt("return",d());case 1:case"end":return n.stop()}}),n)})))),k=function(n){var e=n.children;return(0,c.jsx)("div",{style:{padding:"2rem"},children:e})},E=function(n){var e=n.children,t=g(),r=(0,x.Z)(t,1)[0];return(0,c.jsxs)("div",{style:{height:"26rem",border:"1px solid black"},children:[(0,c.jsx)("div",{children:"Component A"}),(0,c.jsxs)("div",{children:["Data: ",r&&JSON.stringify(r)]}),(0,c.jsx)(k,{children:r?(0,c.jsx)("div",{children:e}):(0,c.jsx)("div",{children:"Loading..."})})]})},D=function(n){var e=n.children,t=y(),r=(0,x.Z)(t,1)[0];return(0,c.jsxs)("div",{style:{border:"1px solid black"},children:[(0,c.jsx)("div",{children:"Component B"}),(0,c.jsxs)("div",{children:["Data: ",r&&JSON.stringify(r)]}),(0,c.jsx)(k,{children:r?(0,c.jsx)("div",{children:e}):(0,c.jsx)("div",{children:"Loading..."})})]})},w=function(n){var e=n.children,t=b(),r=(0,x.Z)(t,1)[0];return(0,c.jsxs)("div",{style:{border:"1px solid black"},children:[(0,c.jsx)("div",{children:"Component C"}),(0,c.jsxs)("div",{children:["Data: ",r&&JSON.stringify(r)]}),(0,c.jsx)(k,{children:r?(0,c.jsx)("div",{children:e}):(0,c.jsx)("div",{children:"Loading..."})})]})},S=function(n){var e=n.children,t=C(),r=(0,x.Z)(t,1)[0];return(0,c.jsxs)("div",{style:{border:"1px solid black"},children:[(0,c.jsx)("div",{children:"Component D"}),(0,c.jsxs)("div",{children:["Data: ",r&&JSON.stringify(r)]}),(0,c.jsx)(k,{children:r?(0,c.jsx)("div",{children:e}):(0,c.jsx)("div",{children:"Loading..."})})]})},N=function(){return(0,c.jsx)("div",{children:(0,c.jsx)(E,{children:(0,c.jsx)(D,{children:(0,c.jsx)(w,{children:(0,c.jsx)(S,{})})})})})},O=t(4663),P=t(8556),_=t(7712),T=t(3296),L=function(){return(0,c.jsx)(T.Z,{navigation:(0,c.jsx)(_.Z,{}),content:(0,c.jsx)("main",{children:(0,c.jsxs)("article",{children:[(0,c.jsxs)("div",{children:[(0,c.jsx)(P.Z,{children:"Prefetch"}),(0,c.jsx)(O.P,{children:"Fetching data in React usually looks like this:"}),(0,c.jsx)("figure",{children:(0,c.jsx)(i.E,{children:"const Component = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    // fetch as soon as component mounts\n    fetchData().then((d) => {\n      setData(d);\n    });\n  }, []);\n\n  return data && <div>children</div>;\n};"})}),(0,c.jsx)(O.P,{children:"You fetch as soon as the component mounts. While the data is on the way, you postpone the rendering of children. This way of getting data does not do any harm in the majority of cases. It has one fault tho. Its the fetching on mount. To make make case clear, Ill provide couple of examples."}),(0,c.jsx)(O.P,{children:"ADD TEXT"}),(0,c.jsx)("figure",{children:(0,c.jsx)(i.E,{children:"const Component = () => {\n  return (\n    <div>\n      <ComponentA>\n        <ComponentB>\n          <ComponentC>\n            <ComponentD />\n          </ComponentC>\n        </ComponentB>\n      </ComponentA>\n    </div>\n  );\n};"})}),(0,c.jsx)("figure",{children:(0,c.jsx)(f,{})}),(0,c.jsx)(O.P,{children:"One thing they have certainly in common. They render its children as soon as the data is available. The difference is that the sequence example fetches, as the naming suggest, in sequence: on mount, while the parallel example fetches all needed data parallel, even before react starts rendering anything."}),(0,c.jsx)(O.P,{children:"The implementation of the sequence components looks like this:"}),(0,c.jsx)("figure",{children:(0,c.jsx)(i.E,{children:'const ComponentA = ({ children }) => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetchData().then((d) => {\n      setData(d);\n    });\n  }, []);\n\n  return (\n    <div\n      style={{\n        height: "34rem",\n        border: "1px solid black",\n      }}\n    >\n      <div>Component A</div>\n      <div>Data: {data && JSON.stringify(data)}</div>\n      <div style={{ padding: "3rem" }}>\n        {!data ? <div>Loading...</div> : <div>{children}</div>}\n      </div>\n    </div>\n  );\n};'})}),(0,c.jsx)(O.P,{children:"And the implementation of the parallel component looks like this:"}),(0,c.jsx)("figure",{children:(0,c.jsx)(i.E,{children:'const useData = prefetch(\n  async () => fetchData()\n);\n\nconst ComponentA = ({ children }) => {\n  const [data] = useData();\n\n  return (\n    <div\n      style={{\n        height: "34rem",\n        border: "1px solid black",\n      }}\n    >\n      <div>Component A</div>\n      <div>Data: {data && JSON.stringify(data)}</div>\n      <div style={{ padding: "3rem" }}>\n        {!data ? <div>Loading...</div> : <div>{children}</div>}\n      </div>\n    </div>\n  );\n};'})}),(0,c.jsx)(O.P,{children:"If we run them side by side, the difference is pretty clear."})]}),(0,c.jsxs)("figure",{children:[(0,c.jsx)("figcaption",{children:"Sequence fetch (Waterfall)"}),(0,c.jsx)(f,{})]}),(0,c.jsxs)("figure",{children:[(0,c.jsx)("figcaption",{children:"Parallel Fetch"}),(0,c.jsx)(N,{})]}),(0,c.jsx)(O.P,{children:"The parallel fetching is always faster. If you need to fetch data on mount, I would suggest you not to do that. Prefetch the data and rerender as soon as data is available."}),(0,c.jsx)(O.P,{children:'A simple implementation of the "prefetch" function is below. Error handling is omitted here.'}),(0,c.jsx)("figure",{children:(0,c.jsx)(i.E,{children:'function prefetch(resolver) {\n  const ERROR = "error";\n  const RESOLVED = "resolved";\n  const FETCHING = "fetching";\n\n  let status = FETCHING; // initial status\n  let result = null;\n  let error = null;\n\n  const promised = resolver();\n  // subscribe to the promise as soon as this function is called\n  promised.then(\n    (_data) => {\n      status = RESOLVED;\n      result = _data;\n    },\n    (_error) => {\n      status = ERROR;\n      error = _error;\n    }\n  );\n\n  return () => {\n    // return a hook function\n    const rerender = useRerender();\n\n    useEffect(() => {\n      if (status === FETCHING) {\n        // if this hook renders before the promise is resolved\n        promised.then(() => {\n          // await the result, rerender the component\n          rerender();\n        });\n      }\n    }, []);\n\n    return [result, error];\n  };\n}'})})]})})})}},7372:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/Prefetch",function(){return t(2573)}])}},function(n){n.O(0,[170,846,774,888,179],(function(){return e=7372,n(n.s=e);var e}));var e=n.O();_N_E=e}]);