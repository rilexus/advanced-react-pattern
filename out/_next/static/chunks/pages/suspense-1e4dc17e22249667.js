(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[563],{5258:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return Z}});var r=t(7294),o=t(7674),i=t(2777),a=t(2262),s=t(5959),c=t(2179),l=t(7247),u=t(9499),d=t(29),h=t(7794),p=t.n(h),f=t(3296),m=function(e){return!e},g=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:m,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return(0,r.useReducer)(e,n)},b=t(7712),w=t(8556),y=t(4663),k=t(4314),v=t(3236),j=function(){var e=(0,d.Z)(p().mark((function e(){var n,t=arguments;return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.length>0&&void 0!==t[0]?t[0]:200,e.abrupt("return",new Promise((function(e){return setTimeout(e,n)})));case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),x=j,P=t(5893);function B(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}var C=function(e){return function(n){var t=g(),i=(0,o.Z)(t,2)[1],a=(0,r.useRef)((function(){return null}));(0,r.useEffect)((function(){e().then((function(e){var n=e.default;a.current=n,i()})).catch((function(e){}))}),[]);var s=a.current;return(0,P.jsx)(s,function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?B(Object(t),!0).forEach((function(n){(0,u.Z)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):B(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({},n))}},O=C((0,d.Z)(p().mark((function e(){return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,x(1e3);case 2:return e.abrupt("return",t.e(662).then(t.bind(t,4478)));case 3:case"end":return e.stop()}}),e)})))),R=C((0,d.Z)(p().mark((function e(){return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,x(1e3);case 2:return e.abrupt("return",t.e(23).then(t.bind(t,1535)));case 3:case"end":return e.stop()}}),e)})))),E=C((0,d.Z)(p().mark((function e(){return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,x(1e3);case 2:return e.abrupt("return",t.e(612).then(t.bind(t,7661)));case 3:case"end":return e.stop()}}),e)})))),S=function(){var e=(0,r.useState)("Backlog"),n=e[0],t=e[1];return(0,P.jsxs)("div",{style:{border:"1px solid black",display:"flex"},children:[(0,P.jsxs)("div",{style:{marginRight:"1rem",paddingRight:"1rem",border:"1px solid grey"},children:[(0,P.jsx)("i",{children:"Sidebar"}),(0,P.jsx)("div",{children:(0,P.jsx)("button",{onClick:function(){return t("Backlog")},children:"Backlog"})}),(0,P.jsx)("div",{children:(0,P.jsx)("button",{onClick:function(){return t("Board")},children:"Board"})}),(0,P.jsx)("div",{children:(0,P.jsx)("button",{onClick:function(){return t("Release")},children:"Release"})})]}),(0,P.jsxs)("div",{children:[(0,P.jsx)("i",{children:"View"}),(0,P.jsxs)("div",{style:{height:"15rem"},children:["Backlog"===n&&(0,P.jsx)(O,{}),"Board"===n&&(0,P.jsx)(R,{}),"Release"===n&&(0,P.jsx)(E,{})]})]})]})};t(5830);function T(e){var n=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var t,r=(0,l.Z)(e);if(n){var o=(0,l.Z)(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return(0,c.Z)(this,t)}}function I(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}var L=function(){var e=(0,d.Z)(p().mark((function e(){var n,t=arguments;return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.length>0&&void 0!==t[0]?t[0]:200,e.abrupt("return",new Promise((function(e){return setTimeout(e,n)})));case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),z=(r.Component,function(e){var n=function(){return null},t="pending"}(function(){var e=(0,d.Z)(p().mark((function e(){return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,L(2e3);case 2:return e.abrupt("return",t.e(145).then(t.bind(t,6066)));case 3:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}()),function(){var e=g(),n=(0,o.Z)(e,2);n[0],n[1];return(0,P.jsx)(f.Z,{navigation:(0,P.jsx)(b.Z,{}),content:(0,P.jsx)("main",{children:(0,P.jsxs)("article",{children:[(0,P.jsxs)("header",{children:[(0,P.jsx)(w.Z,{children:"Suspense"}),(0,P.jsxs)("div",{children:[(0,P.jsxs)("address",{children:["By"," ",(0,P.jsx)("a",{rel:"author",href:"https://github.com/rilexus",children:"Stanislav Panchenko"})]}),"on"," ",(0,P.jsx)("time",{pubdate:!0,dateTime:"2022-06-19",title:"Jun 19th, 2022",children:"6/19/22"})]})]}),(0,P.jsx)(y.P,{children:(0,P.jsx)("i",{children:"After this article you should be able to understand what lazy loading is, why it maters and how it is implemented under the hood."})}),(0,P.jsx)(y.P,{children:"Imagine you have a big Single Page Application with a sidebar like this one."}),(0,P.jsxs)("figure",{children:[(0,P.jsx)("img",{width:"500px",height:"auto",src:(0,k.Z)("/application_sidebar.png")}),(0,P.jsx)("figcaption",{children:"Screenshot of the JIRA application."})]}),(0,P.jsx)(y.P,{children:'Every button leads to a different page. I think the word "view" would be more appropriate, since its not a page. So every view is separate and independent from each other. It has its own purpose, its own code.'}),(0,P.jsx)(y.P,{children:'The user is interested in one view at a time and probably not in all the views of the application. Just think how often you visit the "setting" view of any application. Ill bet, you go there one time a month, if at all.'}),(0,P.jsx)(y.P,{children:"Now the thing is, if we as a developer do not pay attention, we would bundle the whole application to one big file."}),(0,P.jsx)(y.P,{children:"This has an effect on the loading time ouf the application and the user experience. All the javascript code, css, images, svg`s etc. We ship a lot of code at once."}),(0,P.jsxs)(y.P,{children:["Luckily we can improve this by utilising"," ",(0,P.jsx)("a",{href:"https://webpack.js.org/guides/lazy-loading/",children:"webpack and the import function."})]}),(0,P.jsx)(v.E,{children:'const Backlog = await import(/* webpackChunkName: "Backlog" */ "../Backlog");\nconst Board = await  import(/* webpackChunkName: "Board" */"../Board");\nconst Reports = await import(/* webpackChunkName: "Report" */"../Reports");\nconst Releases = await import(/* webpackChunkName: "Releases" */"../Releases");'}),(0,P.jsx)(y.P,{children:"By doing this, webpack will split our application during the bundle time in small chunks. We will not get one single, heavy file, but multiple small once. One file for every component."}),(0,P.jsx)(y.P,{children:"There is one thing left to do for us. That is to load this js files and to display those components only when we need them."}),(0,P.jsx)(y.P,{children:"One obvious implementation could be like this."}),(0,P.jsx)(v.E,{children:'const Component = () => {\n  const [, rerender] = useToggle();\n\n  const backlogRef = useRef(null);\n\n  const loadSidebar = async () => {\n    //if backlog already loaded, do nothing\n    if (backlogRef.current) return;\n\n    const { default: Component } = await import(/* webpackChunkName: "Backlog" */ "../Backlog");\n    backlogRef.current = Component;\n\n    rerender();\n  };\n\n  const Backlog = backlogRef.current;\n  return (\n    <div>\n      <div>\n        {/*sidebar*/}\n        <button onClick={loadSidebar}>Backlog</button>\n      </div>\n      <div>\n        {/*view*/}\n        {Backlog && <Backlog />}\n      </div>\n    </div>\n  );\n};'}),(0,P.jsx)(y.P,{children:"We import the component on click, await the data, save it in a ref, rerender and were done."}),(0,P.jsx)(y.P,{children:'That works great! Although it is manuel work and very verbose. For every view, we would need to write the same logic again and again. I personally would prefer not to think about the implementation at all. I would like to simply use it. I would like to have it more like: "Here is a component. Please load and display it only as soon as I need it."'}),(0,P.jsx)(v.E,{children:"const Backlog = (props) => {\n  const [, rerender] = useToggle();\n  const ref = useRef(() => null);\n  \n  useEffect(() => {\n    import('../Backlog').then(({default: Component}) => {\n      ref.current = Component;\n      \n      rerender()\n    });\n  }, []);\n  \n  const Component = ref.current;\n  return <Component {...props}/>\n}"}),(0,P.jsx)(y.P,{children:"This is much better! Every component would be isolated. I can simply import it and use it. Personally, I would not prefer to write this for every component tho."}),(0,P.jsx)(y.P,{children:"Lets move out the import state."}),(0,P.jsx)(v.E,{children:"const Lazy = ({ factory,...props }) => {\n  const [, rerender] = useToggle();\n  const ref = useRef(null);\n\n  useEffect(() => {\n    factory().then(({ default: Component }) => {\n      ref.current = Component;\n\n      rerender();\n    });\n  }, []);\n\n  const Component = ref.current;\n  return Component && <Component {...props} />;\n};\n\n\nconst Backlog = (props) => {\n  return <Lazy factory={() => import('../Backlog')} {...props}/>\n}"}),(0,P.jsx)(y.P,{children:"Instead of hard code the import, we delegate the import call to a function. Now I do not need to reimplement the same logic multiple times. This solution is definitely better then the thing we have started with. Still to much work for me tho. I do not like to worry about the props spreading, passing the import statement in to a component, wrap it in another component. Hustle! All this should be automated even further."}),(0,P.jsx)(y.P,{children:"Something like this would be awesome!"}),(0,P.jsx)(v.E,{children:'const BackLog = lazy(() => import("../Backlog"));'}),(0,P.jsx)(y.P,{children:"I get a component back, the import is delegated and I should not worry about props."}),(0,P.jsx)(v.E,{children:"const lazy = (factory) => {\n  // return a React component function\n  return function LazyWrapper(props) {\n    const [, rerender] = useToggle();\n    const ref = useRef(() => null);\n    useEffect(() => {\n      // load JS module right away, LazyWrapper lazy is called\n      factory()\n        // wait for the JS module to be resolved\n        .then(({ default: Component }) => {\n          ref.current = Component;\n\n          rerender();\n        })\n        .catch((e) => {\n          // handle error\n        });\n    }, []);\n\n    const Component = ref.current;\n    return <Component {...props} />;\n  };\n};"}),(0,P.jsx)(y.P,{children:"That is much better!"}),(0,P.jsx)(y.P,{children:"I would import all needed components at the top of the file and not worry about re-rendering, refs props and so on."}),(0,P.jsx)(v.E,{children:'const Backlog = lazy(() => import(/* webpackChunkName: "Backlog" */ "../Backlog"));\nconst Board = lazy(() => import(/* webpackChunkName: "Board" */"../Board"));\nconst Reports = lazy(() => import(/* webpackChunkName: "Report" */"../Reports"));'}),(0,P.jsx)(y.P,{children:"The application would look this now."}),(0,P.jsx)(v.E,{children:'const Application = () => {\n  const [currentComponent, setComponent] = useState("Backlog");\n\n  return (\n    <div>\n      <div>\n        <button onClick={() => setComponent("Backlog")}>Backlog</button>\n        <button onClick={() => setComponent("Board")}>Board</button>\n        <button onClick={() => setComponent("Report")}>Report</button>\n      </div>\n      <div>\n        {currentComponent === \'Backlog\' && <Backlog/>}\n        {currentComponent === \'Board\' && <Board/>}\n        {currentComponent === \'Report\' && <Report/>}\n      </div>\n    </div>\n  );\n};'}),(0,P.jsx)("small",{children:"You could you the react-router when you prefer that."}),(0,P.jsx)(y.P,{children:"This is nice and neat! And the best part is, that the application will be served to the user much faster."}),(0,P.jsx)(y.P,{children:"The behavior of the application would be now like this:"}),(0,P.jsx)("div",{children:(0,P.jsx)(S,{})}),(0,P.jsx)(y.P,{children:"If you open the network tab in the browser, every time you click on the sidebar button, you will see that the component file is being loaded. The application is not served as a whole initially, but piece by piece."}),(0,P.jsxs)("figure",{children:[(0,P.jsx)("img",{src:(0,k.Z)("/watterfall.png"),alt:"",width:"600px"}),(0,P.jsx)("figcaption",{children:"Browsers network tab."})]}),(0,P.jsx)(y.P,{children:"Currently we have an UX issue. When you click the sidebar button, the current view disappears and the user sees nothing for one second. In the real life application it might be longer or shorter depending on the size of the component file and the internet connect of the user. In the current example its 1000ms exactly, because I have delayed the response time to illustrate the issue."}),(0,P.jsx)(y.P,{children:"Leaving the user with a blank page is disorienting. Lets fix that. We could do something like this:"}),(0,P.jsx)(v.E,{children:'const BackLog = lazy(() => import("../Backlog"));\nconst Component = () => {\n  return <BackLog fallback={<div>Loading...</div>}/>\n}'}),(0,P.jsxs)(y.P,{children:["We pass a fallback UI element. While the component is being served, a fallback should be displayed. ",(0,P.jsx)("br",{}),"We could implement that, but Im not a fan of this solution. It would suggest that the Backlog component itself accepts a fallback. But it does not! The fallback is not an implementation detail for the Backlog."]}),(0,P.jsx)(y.P,{children:"I would be nice to do something like this instead:"}),(0,P.jsx)(v.E,{children:'const BackLog = lazy(() => import("../Backlog"));\nconst Component = () => {\n  return (\n    <Suspence fallback={<div>Loading...</div>}>\n      <BackLog />\n    </Suspence>\n  );\n};'}),(0,P.jsxs)(y.P,{children:["Currently there is no way I could do that. The Suspense component does not communicate with the Backlog in any way. We could solve it with the -as I call it-"," ",(0,P.jsx)("a",{href:(0,k.Z)("/Decorator"),children:"Decorator"})," pattern. I would pass a callback to the Backlog and as soon as the component finishes loading call it and rerender the Suspense component."]}),(0,P.jsx)(y.P,{children:"There is another way tho! This will conclude this article."}),(0,P.jsx)(y.P,{children:"Lets adjust the lazy function:"}),(0,P.jsx)(v.E,{children:'const lazy = (factory) => {\n  let Component = () => null;\n  let status = "pending";\n\n  // return a React component function\n  return function LazyWrapper(props) {\n    useEffect(() => {\n      // load JS module right away, LazyWrapper lazy is called\n      let promise = factory()\n        // wait for the JS module to be resolved\n        .then((module) => {\n          status = "resolved";\n          // get the default export from a file\n          Component = module.default;\n        })\n        .catch((e) => {\n          // handle error\n          status = "error";\n        });\n\n      // if still pending, throw to by catched by Suspense\n      if (status === "pending") {\n        throw promise;\n      }\n    }, []);\n\n    return <Component {...props} />;\n  };\n};'}),(0,P.jsx)(y.P,{children:"As soon as the LazyWrapper renders, the factory is called and as long as the promise is pending, we throw it. Yes, we can throw a promise. We can throw not only error instances, we can throw anything. String, numbers, you name it! You can throw even functions."}),(0,P.jsx)("figure",{children:(0,P.jsx)("img",{src:"https://media.giphy.com/media/l4FGCfEWJ7ztMzZao/giphy.gif",alt:"Facial expression emphasizing confusion."})}),(0,P.jsx)(y.P,{children:"The implementation of the Suspense looks like this:"}),(0,P.jsx)(v.E,{children:'class Suspense extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isLoading: false };\n  }\n\n  componentDidCatch(promiseOrError, errorInfo) {\n    // do nothing, if not a promise\n    if (typeof promiseOrError.then !== "function") return;\n    const promise = promiseOrError;\n    this.setState({\n      // if catched, show fallback\n      isLoading: true,\n    });\n\n    promise\n      .then(() => {\n        // promise is resolved, render children\n        this.setState({\n          isLoading: false,\n        });\n      })\n      .catch((e) => {\n        // handle error\n      });\n  }\n\n  render() {\n    const { isLoading } = this.state;\n    const { fallback, children } = this.props;\n\n    if (isLoading) {\n      return fallback;\n    }\n\n    return children;\n  }\n}'}),(0,P.jsx)(y.P,{children:"The steps of the execution are as follows: Suspense renders children, the LazyWrapper from the lazy functions renders and throws the promise, Suspense catches it in the componentDidCatch function, it sets the internal state to isLoading, re-renders and shows the fallback UI. As soon as the promise resolves, Suspense sets the isLoading state to false and renders children again. This time the LazyWrapper does not call the factory but renders the fetched component."})]})})})}),Z=function(){return(0,P.jsx)(z,{})}},4314:function(e,n){"use strict";n.Z=function(e){return"".concat("/advanced-react-pattern").concat(e)}},2236:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/suspense",function(){return t(5258)}])},2777:function(e,n,t){"use strict";function r(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}t.d(n,{Z:function(){return r}})},2262:function(e,n,t){"use strict";function r(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,n,t){return n&&r(e.prototype,n),t&&r(e,t),e}t.d(n,{Z:function(){return o}})},7247:function(e,n,t){"use strict";function r(e){return r=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},r(e)}t.d(n,{Z:function(){return r}})},5959:function(e,n,t){"use strict";function r(e,n){return r=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e},r(e,n)}function o(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&r(e,n)}t.d(n,{Z:function(){return o}})},2179:function(e,n,t){"use strict";t.d(n,{Z:function(){return o}});var r=t(4027);function o(e,n){if(n&&("object"===r(n)||"function"===typeof n))return n;if(void 0!==n)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}}},function(e){e.O(0,[170,714,774,888,179],(function(){return n=2236,e(e.s=n);var n}));var n=e.O();_N_E=n}]);