(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[549],{58698:function(t,n,e){"use strict";e.r(n),e.d(n,{default:function(){return C}});var a=e(17674),r=e(59499),s=e(14666);function o(t){if("undefined"!==typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}var u=e(2937),l=e(14882);var i=e(52587);function c(t){return function(t){if(Array.isArray(t))return(0,i.Z)(t)}(t)||o(t)||(0,u.Z)(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var d=e(67294),h=e(68556),p=e(84663),S=e(43236),f=e(9668),g=e(15234),w=(e(29404),e(85893)),v=function(t){var n=t.space,e=void 0===n?"0px":n;return(0,w.jsx)("div",{style:{paddingTop:e}})},m=function(t){var n=t.children,e=t.color;return(0,w.jsx)("div",{style:{color:e},children:n})};function j(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,a)}return e}function x(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?j(Object(e),!0).forEach((function(n){(0,r.Z)(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):j(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}var y=function(t){var n=(0,d.useState)({past:[],initialState:t,current:t,future:[]}),e=n[0],a=n[1];return[e.current,function(t){a((function(n){var e,a=[];if(n.past.length<=10)a=[].concat(c(n.past),[n.current]);else{var r=(e=n.past,(0,s.Z)(e)||o(e)||(0,u.Z)(e)||(0,l.Z)()).slice(1);a=[].concat(c(r),[n.current])}return x(x({},n),{},{past:a,current:"function"===typeof t?t(n.current):t,future:[]})}))},{undo:function(){a((function(t){if(0===t.past.length)return t;var n=[].concat(c(t.future),[t.current]),e=c(t.past),a=e.pop();return x(x({},t),{},{past:e,current:a,future:n})}))},redo:function(){a((function(t){if(0===t.future.length)return t;var n=[].concat(c(t.past),[t.current]),e=c(t.future),a=e.pop();return x(x({},t),{},{past:n,current:a,future:e})}))},reset:function(){a((function(t){return x(x({},t),{},{past:[],current:e.initialState,future:[]})}))},canUndo:e.past.length>0,canRedo:e.future.length>0}]},P=function(){var t=y(""),n=(0,a.Z)(t,3),e=n[0],r=n[1],s=n[2],o=s.undo,u=s.redo,l=s.reset,i=s.canUndo,c=s.canRedo;return(0,w.jsxs)("div",{children:[(0,w.jsx)("input",{placeholder:"Type",type:"text",value:e,onChange:function(t){r(t.target.value)}}),(0,w.jsx)("button",{disabled:!i,onClick:o,children:"undo"}),(0,w.jsx)("button",{disabled:!c,onClick:u,children:"redo"}),(0,w.jsx)("button",{onClick:l,children:"reset"})]})},b=function(){return(0,w.jsxs)("div",{children:[(0,w.jsx)(v,{space:"4rem"}),(0,w.jsx)(g.Z,{children:(0,w.jsx)("div",{children:(0,w.jsxs)(f.Z,{children:[(0,w.jsxs)(m,{color:"#6e6e73",children:[(0,w.jsx)(f.Z.Author,{name:"Stanislav Panchenko",url:"https://github.com/rilexus"}),(0,w.jsx)(f.Z.DatePublished,{children:"August 19, 2022"})]}),(0,w.jsx)(f.Z.Headline,{children:(0,w.jsx)(h.Z,{children:"Undo State"})}),(0,w.jsx)(f.Z.Body,{style:{marginBottom:"2rem"},children:(0,w.jsxs)("div",{children:[(0,w.jsx)(p.P,{children:"Very common requirements in some what complex web applications is the \u201cundo\u201c functionality. The user wants to undo the recent changes made in the application by pressing a button. You'll know this behaviour when you press \u201ccommand-z\u201c on mac or \u201cstrg-z\u201c on windows."}),(0,w.jsx)(p.P,{children:"Example:"}),(0,w.jsx)(P,{}),(0,w.jsx)(p.P,{children:"Translating this requirements in to react would means setting the current state of a component to the previous states."}),(0,w.jsx)(p.P,{children:"First we would need a component any state:"}),(0,w.jsx)(S.E,{children:'const Component = () => {\n  const [state, setState] = useState("");\n\n  const handleChange = (e) => {\n    setState(e.target.value);\n  };\n\n  return (\n    <div>\n      <input type="text" onChange={handleChange} value={state} />\n    </div>\n  );\n};'}),(0,w.jsx)(p.P,{children:"When we set a new state, We would need to keep track of all the previous states:"}),(0,w.jsx)(S.E,{highlight:[{start:3,end:4},{start:10,end:14}],children:'const Component = () => {\n  const [state, setState] = useState({\n    current: "",\n    past: [],\n  });\n\n  const handleChange = (e) => {\n    setState((oldState) => {\n      const { value } = e.target;\n      return {\n        ...oldState,\n        past: [...oldState.past, oldState.current],\n        current: value,\n      };\n    });\n  };\n\n  return (\n    <div>\n      <input type="text" onChange={handleChange} value={state.current} />\n    </div>\n  );\n};'}),(0,w.jsx)(p.P,{children:"We save all the past states by adding the current value from the oldState to the past array and in the same time add the new value to the current."}),(0,w.jsx)(S.E,{highlight:[{start:12,end:13}],children:'const Component = () => {\n  const [state, setState] = useState({\n    current: "",\n    past: [],\n  });\n\n  const handleChange = (e) => {\n    setState((oldState) => {\n      const { value } = e.target;\n      return {\n        ...oldState,\n        past: [...oldState.past, oldState.current],\n        current: value,\n      };\n    });\n  };\n\n  return (\n    <div>\n      <input type="text" onChange={handleChange} value={state.current} />\n    </div>\n  );\n};'}),(0,w.jsx)(p.P,{children:"Now to undo the state change, we would need to take the last value from the past and save it in the current."}),(0,w.jsx)(S.E,{highlight:[{start:23,end:24},{start:28,end:29}],children:'const Component = () => {\n  const [state, setState] = useState({\n    current: "",\n    past: [],\n  });\n\n  const handleChange = (e) => {\n    setState((oldState) => {\n      const { value } = e.target;\n      return {\n        ...oldState,\n        past: [...oldState.past, oldState.current],\n        current: value,\n      };\n    });\n  };\n\n  const undo = () => {\n    setState((oldState) => {\n      if (oldState.past.length === 0) {\n        return oldState;\n      }\n      const newPast = [...oldState.past];\n      const pastValue = newPast.pop();\n\n      return {\n        ...oldState,\n        past: newPast,\n        current: pastValue,\n      };\n    });\n  };\n\n  return (\n    <div>\n      <input type="text" onChange={handleChange} value={state.current} />\n      <button onClick={undo}>undo</button>\n    </div>\n  );\n};'}),(0,w.jsx)(p.P,{children:"First we make sure that we have values in the past. If we do not, we return the old state. If we have past states, we break the reference to the old past array, pop the last value and save everything to the new state."}),(0,w.jsx)(p.P,{children:"While this works, we have an issue! The past array could grow until we run out of memory. We can prevent this from happening, by limiting the length of the past array. If the array grows beyond a certain limit, we remove values from the beginning of the array, effectively limiting the amount of past states."}),(0,w.jsx)(S.E,{highlight:[{start:11,end:17}],children:'const Component = () => {\n  const [state, setState] = useState({\n    current: "",\n    past: [],\n  });\n\n  const handleChange = (e) => {\n    setState((oldState) => {\n      const { value } = e.target;\n\n      let newPast = [];\n      if (oldState.past.length <= 10) {\n        newPast = [...oldState.past];\n      } else {\n        const [, /*remove first: the oldest element*/ ...rest] = oldState.past;\n        newPast = [...rest];\n      }\n\n      return {\n        ...oldState,\n        past: [...newPast, oldState.current],\n        current: value,\n      };\n    });\n  };\n\n  const undo = () => {\n    setState((oldState) => {\n      if (oldState.past.length === 0) {\n        return oldState;\n      }\n      const newPast = [...oldState.past];\n      const pastValue = newPast.pop();\n\n      return {\n        ...oldState,\n        past: newPast,\n        current: pastValue,\n      };\n    });\n  };\n  \n  return (\n    <div>\n      <input type="text" onChange={handleChange} value={state.current} />\n      <button onClick={undo}>undo</button>\n    </div>\n  );\n};'}),(0,w.jsx)(p.P,{children:"If we have more then 10 past states, we remove the first (the oldest) state, preventing the past from growing."}),(0,w.jsx)(p.P,{children:"The current implementation works. Lets make this code reusable and move it in to a dedicated hook."}),(0,w.jsx)(S.E,{highlight:[{start:48,end:48}],children:'const useUndo = (initialState) => {\n  const [state, _setState] = useState({\n    current: initialState,\n    past: [],\n  });\n\n  const undo = () => {\n    _setState((oldState) => {\n      if (oldState.past.length === 0) {\n        return oldState;\n      }\n      const newPast = [...oldState.past];\n      const pastValue = newPast.pop();\n\n      return {\n        ...oldState,\n        past: newPast,\n        current: pastValue,\n      };\n    });\n  };\n\n  const setState = (newState) => {\n    _setState((oldState) => {\n      const value =\n        typeof newState === "function" ? newState(oldState) : newState;\n\n      let newPast = [];\n      if (oldState.past.length <= 10) {\n        newPast = [...oldState.past];\n      } else {\n        const [, /*remove first: the oldest element*/ ...rest] = oldState.past;\n        newPast = [...rest];\n      }\n\n      return {\n        ...oldState,\n        past: [...newPast, oldState.current],\n        current: value,\n      };\n    });\n  };\n\n  return [state.current, { setState, undo }];\n};\n\nconst Component = () => {\n  const [state, { setState, undo }] = useUndo("");\n\n  const handleChange = (e) => {\n    setState(e.target.value);\n  };\n\n  return (\n    <div>\n      <input type="text" onChange={handleChange} value={state} />\n      <button onClick={undo}>undo</button>\n    </div>\n  );\n};'}),(0,w.jsx)(p.P,{children:"It would be great to redo changes again. If the user undoes changes, goes in to the past, it would be great to go in to the future again to the last changes. I would encourage you to implement this feature yourself. If youre interested in seeing the end result, feel free to open the drop down."}),(0,w.jsxs)("details",{children:[(0,w.jsx)("summary",{style:{cursor:"pointer"},children:"End result"}),(0,w.jsx)(S.E,{children:'const useUndo = (initialState) => {\n  const [state, _setState] = useState({\n    past: [],\n    initialState: initialState,\n    current: initialState,\n    future: [],\n  });\n\n  const setState = (newState) => {\n    _setState((oldState) => {\n      let newPast = [];\n      if (oldState.past.length <= 10) {\n        newPast = [...oldState.past, oldState.current];\n      } else {\n        const [, /*remove first: the oldest element*/ ...rest] = oldState.past;\n        newPast = [...rest, oldState.current];\n      }\n      return {\n        ...oldState,\n        past: newPast,\n        current:\n          typeof newState === "function"\n            ? newState(oldState.current)\n            : newState,\n        future: [],\n      };\n    });\n  };\n\n  const undo = () => {\n    _setState((oldState) => {\n      if (oldState.past.length === 0) {\n        return oldState;\n      }\n      const newFuture = [...oldState.future, oldState.current];\n\n      let newPast = [...oldState.past];\n      const newState = newPast.pop();\n\n      return {\n        ...oldState,\n        past: newPast,\n        current: newState,\n        future: newFuture,\n      };\n    });\n  };\n\n  const redo = () => {\n    _setState((oldState) => {\n      if (oldState.future.length === 0) {\n        return oldState;\n      }\n      const newPast = [...oldState.past, oldState.current];\n\n      const newFuture = [...oldState.future];\n      const newState = newFuture.pop();\n\n      return {\n        ...oldState,\n        past: newPast,\n        current: newState,\n        future: newFuture,\n      };\n    });\n  };\n\n  const reset = () => {\n    _setState((oldState) => {\n      return {\n        ...oldState,\n        past: [],\n        current: state.initialState,\n        future: [],\n      };\n    });\n  };\n\n  return [\n    state.current,\n    {\n      setState,\n      undo,\n      redo,\n      reset,\n      canUndo: state.past.length > 0,\n      canRedo: state.future.length > 0,\n    },\n  ];\n};'})]})]})}),(0,w.jsxs)("div",{style:{padding:"3rem 0 1rem 0"},children:[(0,w.jsx)(f.Z.DateCreated,{children:"August 19, 2022"}),(0,w.jsx)(f.Z.Language,{children:"English"}),(0,w.jsx)(f.Z.Organization,{funder:{name:"Stanislav Panchenko"},name:"Stanislav Panchenko",email:"email@stanislavpanchenko.de"}),(0,w.jsx)(f.Z.PartOf,{url:"https://rilexus.github.io/advanced-react-pattern/"}),(0,w.jsx)(f.Z.CopyRight,{name:"Stanislav Panchenko",email:"email@stanislavpanchenko.de"})]})]})})})]})},C=function(){return(0,w.jsx)(b,{})}},9771:function(t,n,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/UndoState",function(){return e(58698)}])}},function(t){t.O(0,[150,76,774,888,179],(function(){return n=9771,t(t.s=n);var n}));var n=t.O();_N_E=n}]);